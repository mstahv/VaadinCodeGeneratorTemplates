<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<codeTemplateList>
    <templates>
        <templates version="1.3">
            <id>a030a234-eccc-433e-8836-bab509e7fd9a</id>
            <name>VaadinForm</name>
            <fileNamePattern>.*\.java$</fileNamePattern>
            <type>class</type>
            <enabled>true</enabled>
            <template>import com.vaadin.flow.component.Component;
import com.vaadin.flow.component.checkbox.Checkbox;
import com.vaadin.flow.component.combobox.ComboBox;
import com.vaadin.flow.component.formlayout.FormLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.textfield.IntegerField;
import com.vaadin.flow.component.textfield.NumberField;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.component.datepicker.DatePicker;
import org.vaadin.firitin.form.AbstractForm;

public class ${class0.name}Form extends AbstractForm&lt;${class0.name}&gt; {

#foreach( $member in $members )
    #set($memberType = $member.type.split("&lt;").get(0))
    #set($type = $javaPsiFacade.findClass($memberType, $global))
    
    #if($member.name == "id")
    #elseif($member.typeName == "LocalDate")
        DatePicker $member.name = new DatePicker();
    #elseif ($member.isString())
        TextField $member.name = new TextField("${StringUtil.capitalize($member.name)}");
    #elseif ($member.isBoolean())
        Checkbox $member.name = new Checkbox("${StringUtil.capitalize($member.name)}");
    #elseif ($member.isInteger() || $member.typeName == "Integer")
        IntegerField $member.name = new IntegerField("${StringUtil.capitalize($member.name)}");
    #elseif ($member.isDouble() || $member.typeName == "Double")
        NumberField $member.name = new NumberField("${StringUtil.capitalize($member.name)}");
    #else
        ComboBox $member.name = new ComboBox&lt;$memberType&gt;("${StringUtil.capitalize($member.name)}");
    #end
#end

    public ${class0.name}Form() {
        super(${class0.name}.class);
    }

    @Override
    protected Component createContent() {
        return new VerticalLayout(
                new FormLayout(
                    #foreach($member in $members)
                        ${member.name} #if( $foreach.hasNext ),
                        #end
                    #end
                ),
                getToolbar()
        );
    }
    
}
</template>
            <fileEncoding>UTF-8</fileEncoding>
            <pipeline>
                <memberSelection>
                    <filterConstantField>true</filterConstantField>
                    <filterEnumField>false</filterEnumField>
                    <filterTransientModifier>false</filterTransientModifier>
                    <filterStaticModifier>true</filterStaticModifier>
                    <filterLoggers>true</filterLoggers>
                    <filterFieldName>id</filterFieldName>
                    <filterFieldType></filterFieldType>
                    <filterMethodName></filterMethodName>
                    <filterMethodType></filterMethodType>
                    <enableMethods>false</enableMethods>
                    <providerTemplate>## set `availableMembers` to provide the members to select
## set `selectedMembers` to select the members initially, set nothing to select all
## Note that it should be type List&lt;PsiMember&gt; or List&lt;MemberEntry&gt;
## And the selected result will be
## - fields1:  List&lt;FieldEntry&gt; where `1` is the step number that you specified
## - methods1: List&lt;MethodEntry&gt;
## - members:  List&lt;MemberEntry&gt;
#set($availableMembers = $class0.members)
</providerTemplate>
                    <allowMultiSelection>true</allowMultiSelection>
                    <allowEmptySelection>true</allowEmptySelection>
                    <sortElements>0</sortElements>
                    <postfix>1</postfix>
                    <enabled>true</enabled>
                </memberSelection>
            </pipeline>
            <insertNewMethodOption>AT_CARET</insertNewMethodOption>
            <whenDuplicatesOption>ASK</whenDuplicatesOption>
            <jumpToMethod>true</jumpToMethod>
            <classNameVm>${class0.qualifiedName}Form</classNameVm>
            <alwaysPromptForPackage>false</alwaysPromptForPackage>
        </templates>
    </templates>
</codeTemplateList>
